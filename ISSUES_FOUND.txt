Manual Review
--------------
Functions Reviewed till Date
1. privatemap
2. toggleclaim,toggleseed,toggleprivate, togglepublic
3. getBnbBalance, adminTransferBnbFund
4. getContractTokenBalance
5. fundsWithdrawal

6. getBnbRate
7. seedUsdt
8. seedbnb
9. privateusdt
10. privateBNB

High Severity
1. Line no - 443,465,481, 501, 520, 540,555 => Invalid require statement. Doesn't restrict user's action adequately.

Explanation:
The require statement at the above-mentioned lines involves an assignment operator(=) instead of an Equality Operator(==).

This leads to a completely unwanted scenario where the boolean values like publicrun, seedrun etc aren't being validated for TRUE or FALSE but simply being assigned a TRUE boolean value.

In other words, users can execute these functions even if the Seed round or Private Round boolean value is FALSE.

Recommendation:
The above-mentioned require statements should use the equality operator to impose an adequate require statement validation.

For instance,
        require(seedrun == true,"seed round is not started or over"); or,

        require(seedrun,"seed round is not started or over");

2. publicbnb function stores wrong Data on Chain.
Line 546

Explaination:
As per the current design of the publicbnb function, it stores a wrong uint value to the publicamount state variable.

The total amount of tokens being sold at Public Sale Round is being stored in terms of Private Sale round.

In other words, the publicamount state variable is being wrongly updated as it stores the value of tokens sold by adding it to the privateamount state varible instead of the public amount state vairble.

This will lead to a completely unwanted scenario where the date stored on chain about the total tokens Sold in the public round will be different from the actual tokens sold in public round.

Recommendation:
The Line no 546 in the publicbnb function should be modified as follows:
        publicamount=publicamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));

3. Invalid Require statement could make publicBnb function completely inaccessible
Line no - 541

Explaination:
The publicbnb function includes a require statement in the above-mentioned line which checks whether or not the privateamount is less than public sale supply.

This is an inaccurate validation as the require statement checks the Public Sale Supply limit with the privateamount state variable instead of publicamount state variable.

Moreover, since the private sale supply(12,000,000)is comparatively larger than the public sale supply(1,000,000), the privateamount state variable might be greater than the public sale supply limit at any instance and the require statement at line 541 shall never qualify.
This will lead to an unexpected scenario where the publicbnb function will be completely inaccessible and will never get executed.

Recommendation:
The require statement of publicbnb function at the above mentioned line should be updated as follows:

        require(publicamount<=1000000000000000000000000,"private round token sale completed");


Medium Severity
1. Line 454, 475, 492, 512, 531,551 => Use require statement instead of IF and REVERT

2. claimamount can be a Local Variable instead of a State Variable.
Line no - 396,557,562

Explaination:
The State variable claimamount has no signifcant usage in the Contract, as per the current design of the protocol.
The variable is used to store the total claimable amount of a user which is then transferred to the user. Once transferred, the claimable state variable is assigned a Zero Value again. 
In simpler terms, the claimamoun state variable shall always hold Zero Value and never symbolize any imperative state chnage in the protocol.
Using claimamount as a State Variable unncessarily uses extra Spaces and affects the Gas Usage in the contract.

Is the USE of claimamount as a State Variable intended?

Recommendation:
If the above-mentioned scenario is not intended, it is recommedned to modify the claimamount variable as a local variable instead of state variable,


Low Severity
1. Line 393,396,409,410,411,412 => Redundant State Variable Update

Explanation:
The AquarChain Smart contract involves redundant update of some of the State variables in the contract.

A boolean variable is by-default initialized to FALSE where as a uint256 is initialized to ZERO. Hence, such state variable doesn't need to be initialized explicitly.

Recommendation:
Redundant initialization of state variables should be avoided.

2. Line 569, 572, 575, 578 => Function promises a return Value of UINT256 but do not return anything.

Explanation:
The functions at the above mentioned lines indicates a uint256 return value at their function signature. 

However, none of those function actually return any uint256 value. If no a uint value is not explicitly returned, the functions will simply return a default return value for uint256, i.e., ZERO.

Recommendation:
If the above-mentioned functions are not supposed to return any uint256 value, the function signatures should be modifed accordingly.


3. Line 418 Contract includes Hardhcoded address


4

Automated Testing:
-------------------


MEDIUM SEVERITY ISSUES

1. Violation of Check Effects Interaction pattern
 Function name - claim() (contracts/Aqua.sol#558-566):
	External calls:
	- token.transfer(msg.sender,claimamount) (contracts/Aqua.sol#562)
	State variables written after the call(s):
	- amountmaptouserprivate[usermapprivate[msg.sender].aqarid] = 0 (contracts/Aqua.sol#564)
	- amountmaptouserpublic[usermappublic[msg.sender].aqarid] = 0 (contracts/Aqua.sol#563)
	- amountmaptouserseed[usermapseed[msg.sender].aqarid] = 0 (contracts/Aqua.sol#565)
 Function name - privateusdt(string,string,string,string,uint256) (contracts/Aqua.sol#479-496):
	External calls:
	- usdt.transferFrom(msg.sender,address(this),_amount) (contracts/Aqua.sol#488)
	State variables written after the call(s):
	- privateamount = privateamount.add(_amount.mul(privateprice).div(1000)) (contracts/Aqua.sol#489)
 Function name - publicusdt(string,string,string,string,uint256) (contracts/Aqua.sol#519-536):
	External calls:
	- usdt.transferFrom(msg.sender,address(this),_amount) (contracts/Aqua.sol#528)
	State variables written after the call(s):
	- publicamount = publicamount.add(_amount.mul(publicprice).div(10)) (contracts/Aqua.sol#529)
 Function name - seedusdt(string,string,string,string,uint256) (contracts/Aqua.sol#439-456):
	External calls:
	- usdt.transferFrom(msg.sender,address(this),_amount) (contracts/Aqua.sol#446)
	State variables written after the call(s):
	- amountmaptouserseed[_id] = amountmaptouserseed[_id].add(_amount.mul(seedprice)) (contracts/Aqua.sol#448)
	- seedamount = seedamount.add(_amount.mul(seedprice)) (contracts/Aqua.sol#449)

2. Return value of external call is not used effectively
 Function name - .seedusdt(string,string,string,string,uint256) (contracts/Aqua.sol#439-456) ignores return value by usdt.transferFrom(msg.sender,address(this),_amount) (contracts/Aqua.sol#446)

 Function name - .privateusdt(string,string,string,string,uint256) (contracts/Aqua.sol#479-496) ignores return value by usdt.transferFrom(msg.sender,address(this),_amount) (contracts/Aqua.sol#488)

 Function name - .publicusdt(string,string,string,string,uint256) (contracts/Aqua.sol#519-536) ignores return value by usdt.transferFrom(msg.sender,address(this),_amount) (contracts/Aqua.sol#528)

 Function name - .claim() (contracts/Aqua.sol#558-566) ignores return value by token.transfer(msg.sender,claimamount) (contracts/Aqua.sol#562)

 Function name - .fundsWithdrawal(IERC20,uint256) (contracts/Aqua.sol#601-609) ignores return value by _token.transfer(msg.sender,value) (contracts/Aqua.sol#607)

--------------------------------------------------------------------------------------------

LOW SEVERITY ISSUES

1. External Visibility should be preferred
getBnbBalance() should be declared external:
	-  Function name - .getBnbBalance() (contracts/Aqua.sol#585-587)

2. Constant declaration should be preferred
 Function name - .privateprice (contracts/Aqua.sol#400) should be constant
 Function name - .publicprice (contracts/Aqua.sol#401) should be constant
 Function name - .seedprice (contracts/Aqua.sol#399) should be constant


3. Too many digits
The following functions in the  Function name -  contract has this issue:

NOTE - ATTACH THE Screen Shot of any one of these function in the actual audit report.

seedusdt(string,string,string,string,uint256) (contracts/Aqua.sol#439-456)  :
	- require(bool,string)(_amount >= 100000000000000000000 && _amount <= 25000000000000000000000,Enter some amount) (contracts/Aqua.sol#440)

seedbnb(string,string,string,string) (contracts/Aqua.sol#458-478)  :
	- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 && msg.value.mul(getBnbRate()).div(1e18) <= 25000000000000000000000,the input bnb amount should be greater than hundred and less than twentyfivethousand) (contracts/Aqua.sol#460-463)

privateusdt(string,string,string,string,uint256) (contracts/Aqua.sol#479-496)  :
	- require(bool,string)(_amount >= 1000000000000000000000 && _amount <= 100000000000000000000000,Enter some amount) (contracts/Aqua.sol#480)

	- privateamount.add(_amount.mul(privateprice).div(1000)) <= 12000000000000000000000000 (contracts/Aqua.sol#485)
privatebnb(string,string,string,string) (contracts/Aqua.sol#497-517)  :
	- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 1000000000000000000000 && msg.value.mul(getBnbRate()).div(1e18) <= 100000000000000000000000,the input 

4. Comparision to Boolean Constant


INFORMATIONAL

5. Code Style Issues

6. 236-276 => Remove Commented Lines

------------------------------------------------------------------------------------------------
HIGH SEVERITY ISSUES

NOTE - DON'T WRITE THESE IN THE REPORT

aqarchain (contracts/Aqua.sol#347-613) contract sets array length with a user-controlled value:
	- usersarr.push(msg.sender) (contracts/Aqua.sol#491)
aqarchain (contracts/Aqua.sol#347-613) contract sets array length with a user-controlled value:
	- usersarr.push(msg.sender) (contracts/Aqua.sol#451)
aqarchain (contracts/Aqua.sol#347-613) contract sets array length with a user-controlled value:
	- usersarr.push(msg.sender) (contracts/Aqua.sol#531)


2. Sends eth to aribary user
aqarchain.adminTransferBnbFund() (contracts/Aqua.sol#589-591) sends eth to arbitrary user
	Dangerous calls:
	- msg.sender.transfer(address(this).balance) (contracts/Aqua.sol#590)
